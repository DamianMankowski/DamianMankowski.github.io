{"version":3,"sources":["component/sandwich.js","component/pizza.js","component/soup.js","App.js","index.js","App.module.css"],"names":["Sandwich","Item","label","name","rules","required","message","min","max","Pizza","step","Soup","submit","onSuccess","onFailure","values","a","preparation_time","payload","format","fetch","method","headers","body","JSON","stringify","response","status","text","Dishes","sandwich","pizza","soup","App","initialValues","slices_of_bread","no_of_slices","diameter","useState","setValues","sending","setSending","type","description","submitting","error","labelCol","span","offset","wrapperCol","layout","className","styles","form","onValuesChange","_","onFinish","alert","showNow","map","dish","Option","value","toLowerCase","htmlType","disabled","onClick","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e2a4f42e.chunk.js","sourcesContent":["import { Form, InputNumber } from 'antd';\r\nconst Sandwich = () => {\r\n  return (\r\n    <Form.Item \r\n      label=\"Number of bread\" \r\n      name=\"slices_of_bread\"\r\n      rules={[\r\n        {\r\n          required: true,\r\n          message: 'Please input number bread for your sandwich!',\r\n        },\r\n      ]}>\r\n      <InputNumber \r\n        min={1}\r\n        max={15} />\r\n    </Form.Item>\r\n  )\r\n}\r\nexport default Sandwich;","import { Form, InputNumber } from 'antd';\r\nconst Pizza = () => {\r\n  return (\r\n    <>\r\n      <Form.Item \r\n        label=\"Number of slices\" \r\n        name=\"no_of_slices\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please input number of pizza slices!',\r\n          },\r\n        ]}>\r\n        <InputNumber\r\n          min={1}\r\n          max={12} />\r\n      </Form.Item>\r\n      <Form.Item \r\n        label=\"Diameter\" \r\n        name=\"diameter\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please input diameter of your pizza!',\r\n          },\r\n        ]}>\r\n        <InputNumber\r\n          min={15}\r\n          max={60}\r\n          step={0.1} />\r\n      </Form.Item>\r\n    </>\r\n  )\r\n}\r\nexport default Pizza;","import { Form, Slider } from 'antd';\r\nconst Soup = () => {\r\n  return (\r\n    <Form.Item \r\n      label=\"Spiciness of soup\" \r\n      name=\"spiciness_scale\"\r\n      rules={[\r\n        {\r\n          required: true,\r\n          message: 'Please select spiciness of your soup!',\r\n        },\r\n      ]}>\r\n      <Slider\r\n        min={1}\r\n        max={10} />\r\n    </Form.Item>\r\n  )\r\n}\r\nexport default Soup;","import { React, useState } from 'react';\r\nimport { Alert, Button, Form, Input, Select, Spin, TimePicker } from 'antd';\r\n\r\nimport Sandwich from './component/sandwich';\r\nimport Pizza from './component/pizza';\r\nimport Soup from './component/soup';\r\n\r\nimport styles from './App.module.css';\r\n\r\nconst API_URL = 'https://frosty-wood-6558.getsandbox.com:443/dishes';\r\n\r\nconst submit = async (onSuccess, onFailure, values) => {\r\n  const { preparation_time } = values;\r\n  const payload = {\r\n    ...values,\r\n    preparation_time: preparation_time.format(\"HH:mm:ss\")\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(API_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(payload)\r\n    });\r\n    const { status } = response;\r\n    const text = await response.text();\r\n    status === 200 ? onSuccess(text) : onFailure(text);\r\n  } catch(error) {\r\n    onFailure(error.message);\r\n  }\r\n}\r\n\r\nconst Dishes = {\r\n  sandwich: <Sandwich />,\r\n  pizza: <Pizza />,\r\n  soup: <Soup />,\r\n}\r\n\r\nconst App = () => {\r\n\r\n  const dishes = ['Soup', 'Pizza', 'Sandwich'];\r\n\r\n  const initialValues = {\r\n    slices_of_bread: 2,\r\n    no_of_slices: 6,\r\n    diameter: 30.0,\r\n  };\r\n  const [values, setValues] = useState(initialValues);\r\n  const [sending, setSending] = useState({});\r\n\r\n  const { type } = values;\r\n  const { message, description, status, submitting } = sending;\r\n\r\n  const onSuccess = () => setSending({\r\n    submitting: false,\r\n    status: 'success',\r\n    message: 'Your dish has been sent correctly!'\r\n  });\r\n  const onFailure = (error) => setSending({\r\n    submitting: false,\r\n    status: 'error',\r\n    message: 'There is a problem with sending your dish...',\r\n    description: error\r\n  })\r\n  const onSubmit = (values) => {\r\n    setSending({ submitting: true  });\r\n    submit(onSuccess, onFailure, values);\r\n  };\r\n\r\n  return (\r\n    <Form\r\n      labelCol={{\r\n        span: 4,\r\n        offset: 4,\r\n      }}\r\n      wrapperCol={{\r\n        span: 8,\r\n      }}\r\n      layout=\"horizontal\"\r\n      className={styles.form}\r\n      initialValues={values}\r\n      onValuesChange={(_, values) => setValues(values)}\r\n      onFinish={onSubmit}\r\n    >\r\n      {message && <Alert\r\n        message={message}\r\n        description={description && <pre>{description}</pre>}\r\n        type={status}\r\n        className={styles.alert} />}\r\n\r\n      <Form.Item \r\n        label=\"Name\" \r\n        name=\"name\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please input name of your dish!',\r\n          },\r\n        ]}>\r\n        <Input />\r\n      </Form.Item>\r\n      <Form.Item \r\n        label=\"Preparation time\" \r\n        name=\"preparation_time\" \r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please input preparation time for dish!',\r\n          },\r\n        ]}>\r\n        <TimePicker showNow={false} />\r\n      </Form.Item>\r\n      <Form.Item\r\n        label=\"Dish\" \r\n        name=\"type\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please select your dish!',\r\n          },\r\n        ]}>\r\n        <Select>\r\n          {dishes.map((dish) => (\r\n            <Select.Option key={dish} value={dish.toLowerCase()}>\r\n              {dish}\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      </Form.Item>\r\n\r\n      {type && Dishes[type]}\r\n\r\n      <Form.Item\r\n        wrapperCol={{\r\n          offset: 8,\r\n          span: 8,\r\n        }}>\r\n        <Button type=\"primary\" htmlType=\"submit\" disabled={submitting}>\r\n          Submit\r\n        </Button>\r\n        <Button type=\"link\" htmlType=\"reset\" onClick={() => setValues(initialValues)} disabled={submitting}>\r\n          Reset\r\n        </Button>\r\n        {submitting && <Spin />}\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'antd/dist/antd.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"App_alert__1tVV9\",\"form\":\"App_form__39Tuq\"};"],"sourceRoot":""}